/*
 * This file is generated by jOOQ.
 */
package com.example.generated.jooq.sample.tables;


import com.example.generated.jooq.sample.Keys;
import com.example.generated.jooq.sample.Sample;
import com.example.generated.jooq.sample.tables.records.GreetingsRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Greetings extends TableImpl<GreetingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sample.greetings</code>
     */
    public static final Greetings GREETINGS = new Greetings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GreetingsRecord> getRecordType() {
        return GreetingsRecord.class;
    }

    /**
     * The column <code>sample.greetings.id</code>.
     */
    public final TableField<GreetingsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sample.greetings.message</code>.
     */
    public final TableField<GreetingsRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>sample.greetings.created_at</code>.
     */
    public final TableField<GreetingsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>sample.greetings.updated_at</code>.
     */
    public final TableField<GreetingsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private Greetings(Name alias, Table<GreetingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Greetings(Name alias, Table<GreetingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sample.greetings</code> table reference
     */
    public Greetings(String alias) {
        this(DSL.name(alias), GREETINGS);
    }

    /**
     * Create an aliased <code>sample.greetings</code> table reference
     */
    public Greetings(Name alias) {
        this(alias, GREETINGS);
    }

    /**
     * Create a <code>sample.greetings</code> table reference
     */
    public Greetings() {
        this(DSL.name("greetings"), null);
    }

    public <O extends Record> Greetings(Table<O> child, ForeignKey<O, GreetingsRecord> key) {
        super(child, key, GREETINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sample.SAMPLE;
    }

    @Override
    public UniqueKey<GreetingsRecord> getPrimaryKey() {
        return Keys.KEY_GREETINGS_PRIMARY;
    }

    @Override
    public Greetings as(String alias) {
        return new Greetings(DSL.name(alias), this);
    }

    @Override
    public Greetings as(Name alias) {
        return new Greetings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Greetings rename(String name) {
        return new Greetings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Greetings rename(Name name) {
        return new Greetings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
